version: "3.9"

services:
  fastapi_service:
    build:
      context: ./backend_python
      dockerfile: Dockerfile
    hostname: fastapi_service
    container_name: fastapi_service
    depends_on:
      - db_postgres
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./backend:/home/app
    networks:
      - my-net
    environment:
      - WATCHFILES_FORCE_POLLING=true

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - 3003:3003
    environment:
      APP_ENV: local
      PORT: 3003
      BLUEPRINT_DB_HOST: db_postgres
      BLUEPRINT_DB_PORT: 5432
      BLUEPRINT_DB_DATABASE: postgres
      BLUEPRINT_DB_USERNAME: postgres
      BLUEPRINT_DB_PASSWORD: postgres
      BLUEPRINT_DB_SCHEMA: public
    networks:
      - my-net

  frontend_service:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    command: npm run dev
    networks:
      - my-net

  redis-cache:
    image: redis:alpine
    hostname: redis-cache
    container_name: redis-cache
    restart: on-failure
    ports:
      - "6379:6379"
    command: redis-server
    volumes:
      - cache:/data
    networks:
      - my-net

  db_postgres:
    image: postgres:14.3-alpine
    hostname: db_postgres
    container_name: db_postgres
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5434:5432"
    volumes:
      - db-postgres:/var/lib/postgresql/data
    networks:
      - my-net

volumes:
  db-postgres:
    driver: local

  cache:
    driver: local

networks:
  my-net:
    name: my-net
    external: true
